{"version":3,"file":"static/js/14.869b9679.chunk.js","mappings":"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","sources":["components/map/components/WDTrigger.tsx","components/map/components/WDCenter.tsx","components/map/components/WDLabel.tsx","enums/BuildUnit.ts","components/map/components/WDProvince.tsx","components/map/components/WDProvinceBorderHighlight.tsx","components/map/components/WDUnitSlot.tsx","components/map/components/WDProvinceOverlay.tsx","components/map/variants/classic/components/WDBoardMap.tsx","utils/map/WDArrowMarkerDefs.tsx","data/BuildUnit.ts","components/map/components/WDBuildUnitButtons.tsx","components/map/components/WDBuildContainer.tsx","components/map/components/WDFlyoutButton.tsx","components/map/components/WDFlyoutContainer.tsx","components/map/components/WDArrowContainer.tsx","components/map/WDMap.tsx","components/controllers/WDMapController.tsx","utils/map/getInitialViewTranslation.ts"],"sourcesContent":["import * as React from \"react\";\n\nconst WDTrigger: React.FC = function (): React.ReactElement {\n  return (\n    <rect\n      className=\"trigger\"\n      height=\"100%\"\n      width=\"100%\"\n      fill=\"black\"\n      style={{ opacity: 0 }}\n    />\n  );\n};\n\nexport default WDTrigger;\n","import { useTheme } from \"@mui/material\";\nimport * as React from \"react\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport { Coordinates } from \"../../../interfaces\";\nimport WDTrigger from \"./WDTrigger\";\n\ninterface WDCenterProps extends Coordinates {\n  province: Province;\n}\n\nconst WDCenter: React.FC<WDCenterProps> = function ({\n  province,\n  x,\n  y,\n}): React.ReactElement {\n  const theme = useTheme();\n  return (\n    <svg\n      id={`${province}-center`}\n      width=\"34\"\n      height=\"34\"\n      viewBox=\"0 0 34 34\"\n      fill=\"none\"\n      x={x}\n      y={y}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M17 32.9998C25.8366 32.9998 33 25.8364 33 16.9999C33 8.1634 25.8366 1 17 1C8.16344 1 1 8.1634 1 16.9999C1 25.8364 8.16344 32.9998 17 32.9998Z\"\n        stroke={theme.palette.primary.main}\n      />\n      <path\n        d=\"M17.0064 25.7269C21.8263 25.7269 25.7336 21.8196 25.7336 16.9997C25.7336 12.1797 21.8263 8.27243 17.0064 8.27243C12.1866 8.27243 8.2793 12.1797 8.2793 16.9997C8.2793 21.8196 12.1866 25.7269 17.0064 25.7269Z\"\n        fill={theme.palette.primary.main}\n      />\n      <WDTrigger />\n    </svg>\n  );\n};\n\nexport default WDCenter;\n","import { useTheme } from \"@mui/material\";\nimport * as React from \"react\";\nimport { Label } from \"../../../interfaces\";\n\ninterface WDLabelProps extends Label {\n  id?: string;\n}\n\nconst WDLabel: React.FC<WDLabelProps> = function ({\n  id,\n  style,\n  text,\n  x,\n  y,\n}): React.ReactElement {\n  const theme = useTheme();\n  return (\n    <text\n      key={id}\n      className=\"label\"\n      style={{\n        fill: theme.palette.primary.main,\n        fontWeight: 900,\n        fontSize: \"150%\",\n        userSelect: \"none\",\n        ...style,\n      }}\n      x={x}\n      y={y}\n      id={id}\n    >\n      {text}\n    </text>\n  );\n};\n\nWDLabel.defaultProps = {\n  id: undefined,\n};\n\nexport default WDLabel;\n","/* eslint-disable no-bitwise */\n\nenum BuildUnit {\n  Army = 1 << 1,\n  Fleet = 1 << 2,\n  All = Army | Fleet,\n}\n\nexport default BuildUnit;\n","import { useTheme } from \"@mui/material\";\nimport * as React from \"react\";\nimport countryMap from \"../../../data/map/variants/classic/CountryMap\";\nimport { ProvinceMapData } from \"../../../interfaces\";\nimport {\n  gameApiSliceActions,\n  gameMaps,\n  gameOverview,\n} from \"../../../state/game/game-api-slice\";\nimport { useAppDispatch, useAppSelector } from \"../../../state/hooks\";\nimport ClickObjectType from \"../../../types/state/ClickObjectType\";\nimport WDCenter from \"./WDCenter\";\nimport WDLabel from \"./WDLabel\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport Territory from \"../../../enums/map/variants/classic/Territory\";\n\ninterface WDProvinceProps {\n  provinceMapData: ProvinceMapData;\n  ownerCountryID: string | undefined;\n  playerCountryID: number | undefined;\n  highlightSelection: boolean;\n}\n\nconst WDProvince: React.FC<WDProvinceProps> = function ({\n  provinceMapData,\n  ownerCountryID,\n  playerCountryID,\n  highlightSelection,\n}): React.ReactElement {\n  const theme = useTheme();\n  const dispatch = useAppDispatch();\n\n  const { user, members } = useAppSelector(gameOverview);\n\n  const { province } = provinceMapData;\n  let territoryFill = \"none\";\n  let territoryFillOpacity = 0;\n  const territoryStrokeOpacity = 1;\n\n  // Normally, color according to supply center ownership\n  if (ownerCountryID) {\n    const ownerCountry = members.find(\n      (m) => m.countryID === Number(ownerCountryID),\n    )?.country;\n    if (ownerCountry && provinceMapData.type !== \"Sea\") {\n      territoryFill = theme.palette[ownerCountry]?.main;\n      territoryFillOpacity = 0.4;\n    }\n  }\n\n  // If highlighting a selection, color according to the active player's\n  // color, and more opaque.\n  if (highlightSelection && playerCountryID) {\n    const playerCountry = members.find(\n      (m) => m.countryID === playerCountryID,\n    )?.country;\n    if (playerCountry) {\n      territoryFill = theme.palette[playerCountry]?.main;\n      territoryFillOpacity = 1.0;\n    }\n  }\n\n  const clickAction = function (\n    evt: React.MouseEvent<SVGGElement, MouseEvent>,\n  ) {\n    dispatch(\n      gameApiSliceActions.processMapClick({\n        evt,\n        clickProvince: province,\n      }),\n    );\n  };\n  return (\n    <svg\n      height={provinceMapData.height}\n      id={`${province}-province`}\n      viewBox={provinceMapData.viewBox}\n      width={provinceMapData.width}\n      x={provinceMapData.x}\n      y={provinceMapData.y}\n    >\n      <g onClick={(e) => clickAction(e)}>\n        {provinceMapData.texture?.texture && (\n          <path\n            d={provinceMapData.path}\n            fill={provinceMapData.texture.texture}\n            id={`${province}-texture`}\n            stroke={provinceMapData.texture.stroke}\n            strokeOpacity={provinceMapData.texture.strokeOpacity}\n            strokeWidth={provinceMapData.texture.strokeWidth}\n          />\n        )}\n        <path\n          d={provinceMapData.path}\n          fill={territoryFill}\n          fillOpacity={territoryFillOpacity}\n          id={`${province}-control-path`}\n          stroke={theme.palette.primary.main}\n          strokeOpacity={1}\n          strokeWidth={territoryStrokeOpacity}\n        />\n      </g>\n      {provinceMapData.centerPos && (\n        <g className=\"no-pointer-events\">\n          <WDCenter\n            province={province}\n            x={provinceMapData.centerPos.x}\n            y={provinceMapData.centerPos.y}\n          />\n        </g>\n      )}\n      {provinceMapData.labels &&\n        provinceMapData.labels.map(({ name, text, style, x, y }, i) => {\n          let txt = text;\n          const id = `${province}-label-${name}`;\n          if (!txt) {\n            txt = provinceMapData.abbr;\n          }\n          return (\n            <g key={id} className=\"no-pointer-events\">\n              <WDLabel\n                id={id}\n                name={name}\n                key={id || i}\n                style={style}\n                text={txt}\n                x={x}\n                y={y}\n              />\n            </g>\n          );\n        })}\n    </svg>\n  );\n};\n\nexport default WDProvince;\n","import * as React from \"react\";\nimport { ProvinceMapData } from \"../../../interfaces\";\n\ninterface WDProvinceBorderHighlightProps {\n  provinceMapData: ProvinceMapData;\n}\n\nconst WDProvinceBorderHighlight: React.FC<WDProvinceBorderHighlightProps> =\n  function ({ provinceMapData }): React.ReactElement {\n    const { province } = provinceMapData;\n\n    return (\n      <svg\n        height={provinceMapData.height}\n        id={`${province}-province-overlay`}\n        viewBox={provinceMapData.viewBox}\n        width={provinceMapData.width}\n        x={provinceMapData.x}\n        y={provinceMapData.y}\n        overflow=\"visible\"\n      >\n        <path\n          d={provinceMapData.path}\n          fill=\"none\"\n          fillOpacity={0.0}\n          id={`${province}-choice-outline`}\n          stroke=\"black\"\n          strokeOpacity={1}\n          strokeWidth={5}\n        />\n      </svg>\n    );\n  };\n\nexport default WDProvinceBorderHighlight;\n","import * as React from \"react\";\nimport Territory from \"../../../enums/map/variants/classic/Territory\";\nimport { Coordinates } from \"../../../interfaces\";\n\ninterface WDUnitSlotProps extends Coordinates {\n  name: string;\n}\n\nconst WDUnitSlot: React.FC<WDUnitSlotProps> = function ({\n  children,\n  name,\n  x,\n  y,\n}): React.ReactElement {\n  return (\n    <g\n      className=\"unit-slot\"\n      id={`${name}-unit-slot`}\n      style={{ overflow: \"visible\" }}\n      x={x}\n      y={y}\n      transform={`translate(${x} ${y})`}\n    >\n      {children}\n    </g>\n  );\n};\n\nexport default WDUnitSlot;\n","import * as React from \"react\";\nimport UIState from \"../../../enums/UIState\";\nimport { ProvinceMapData } from \"../../../interfaces\";\nimport UnitType from \"../../../types/UnitType\";\nimport WDUnit from \"../../ui/units/WDUnit\";\nimport WDUnitSlot from \"./WDUnitSlot\";\nimport { Unit, UnitDrawMode } from \"../../../utils/map/getUnits\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport Territory from \"../../../enums/map/variants/classic/Territory\";\n\ninterface WDProvinceOverlayProps {\n  provinceMapData: ProvinceMapData;\n  units: Unit[];\n}\n\nconst WDProvinceOverlay: React.FC<WDProvinceOverlayProps> = function ({\n  provinceMapData,\n  units,\n}): React.ReactElement {\n  const { province } = provinceMapData;\n\n  // Maps unitSlot name -> unit to draw.\n  const unitFCs: { [key: string]: React.ReactElement } = {};\n  // Maps unitSlot name -> unit to draw, but specifically for units\n  // that are currently disloging another unit on a retreat phase.\n  // This is separate because we need to draw the\n  // dislodger unit in an alternative location when there are two\n  // units in a territory so that they don't overlap each other, including\n  // when those units share the same unitSlot within that territory.\n  const unitFCsDislodging: { [key: string]: React.ReactElement } = {};\n\n  units\n    .filter((unit) => unit.mappedTerritory.province === province)\n    .forEach((unit) => {\n      let unitState: UIState;\n      switch (unit.drawMode) {\n        case UnitDrawMode.NONE:\n          unitState = UIState.NONE;\n          break;\n        case UnitDrawMode.HOLD:\n          unitState = UIState.HOLD;\n          break;\n        case UnitDrawMode.BUILD:\n          // This state of drawing the unit reduces constrast on the unit and isn't necessary\n          // now that we have green build circles highlighting the new builds.\n          // unitState = UIState.BUILD;\n          unitState = UIState.NONE;\n          break;\n        case UnitDrawMode.DISLODGING:\n          unitState = UIState.NONE;\n          break;\n        case UnitDrawMode.DISLODGED:\n          unitState = UIState.DISLODGED;\n          break;\n        case UnitDrawMode.DISBANDED:\n          unitState = UIState.DISBANDED;\n          break;\n        default:\n          unitState = UIState.NONE;\n          break;\n      }\n      const wdUnit = (\n        <WDUnit id={`${province}-unit`} unit={unit} unitState={unitState} />\n      );\n      if (unit.drawMode === UnitDrawMode.DISLODGING) {\n        unitFCsDislodging[unit.mappedTerritory.unitSlotName] = wdUnit;\n      } else {\n        unitFCs[unit.mappedTerritory.unitSlotName] = wdUnit;\n      }\n    });\n\n  return (\n    <g\n      height={provinceMapData.height}\n      id={`${province}-province-overlay`}\n      width={provinceMapData.width}\n      x={provinceMapData.x}\n      y={provinceMapData.y}\n      transform={`translate(${provinceMapData.x} ${provinceMapData.y})`}\n      overflow=\"visible\"\n    >\n      {provinceMapData.unitSlots\n        .filter(({ name }) => name in unitFCs)\n        .map(({ name, x, y }) => (\n          <WDUnitSlot key={name} name={name} x={x} y={y}>\n            {unitFCs[name]}\n          </WDUnitSlot>\n        ))}\n      {provinceMapData.unitSlots\n        .filter(({ name }) => name in unitFCsDislodging)\n        .map(({ name, arrowReceiver }) => {\n          const unitName = `${name}-dislodging`;\n          // For dislodger units, we draw them at the location of the\n          // arrow receiver.\n          return (\n            <WDUnitSlot\n              key={unitName}\n              name={unitName}\n              x={arrowReceiver.x}\n              y={arrowReceiver.y}\n            >\n              {unitFCsDislodging[name]}\n            </WDUnitSlot>\n          );\n        })}\n    </g>\n  );\n};\n\nexport default WDProvinceOverlay;\n","import * as React from \"react\";\nimport WDProvince from \"../../../components/WDProvince\";\nimport WDProvinceBorderHighlight from \"../../../components/WDProvinceBorderHighlight\";\nimport WDProvinceOverlay from \"../../../components/WDProvinceOverlay\";\nimport { Unit } from \"../../../../../utils/map/getUnits\";\nimport provincesMapData from \"../../../../../data/map/ProvincesMapData\";\nimport Province from \"../../../../../enums/map/variants/classic/Province\";\nimport {\n  gameData,\n  gameLegalOrders,\n  gameMaps,\n  gameOrder,\n  gameOverview,\n} from \"../../../../../state/game/game-api-slice\";\nimport { useAppSelector } from \"../../../../../state/hooks\";\nimport { IProvinceStatus } from \"../../../../../models/Interfaces\";\nimport OrderState from \"../../../../../state/interfaces/OrderState\";\nimport { LegalOrders } from \"../../../../../utils/state/gameApiSlice/extraReducers/fetchGameData/precomputeLegalOrders\";\nimport TerritoryMap from \"../../../../../data/map/variants/classic/TerritoryMap\";\nimport countryMap from \"../../../../../data/map/variants/classic/CountryMap\";\n\ninterface WDBoardMapProps {\n  units: Unit[];\n  centersByProvince: { [key: string]: { ownerCountryID: string } };\n  phase: string;\n  isLivePhase: boolean; // Game is live and user is viewing the latest phase?\n}\n\nconst WDBoardMap: React.FC<WDBoardMapProps> = function ({\n  units,\n  centersByProvince,\n  phase,\n  isLivePhase,\n}): React.ReactElement {\n  const gameDataResponse = useAppSelector(gameData);\n  const maps = useAppSelector(gameMaps);\n  const provinceStatusByProvID: { [key: string]: IProvinceStatus } = {};\n  gameDataResponse.data.territoryStatuses.forEach((provinceStatus) => {\n    provinceStatusByProvID[maps.terrIDToProvince[provinceStatus.id]] =\n      provinceStatus;\n  });\n\n  const curOrder: OrderState = useAppSelector(gameOrder);\n  const legalOrders: LegalOrders = useAppSelector(gameLegalOrders);\n\n  const overview = useAppSelector(gameOverview);\n  const { members, user } = overview;\n\n  let provincesToHighlight: Province[] = [];\n  let provincesToChoose: Province[] = [];\n  if (isLivePhase && user) {\n    if (phase === \"Diplomacy\") {\n      if (!curOrder.inProgress) {\n        provincesToHighlight = [];\n        provincesToChoose = [];\n      } else if (curOrder.type === \"Move\") {\n        if (curOrder.viaConvoy) {\n          provincesToHighlight = [\n            maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n          ];\n          provincesToChoose = legalOrders.legalViasByUnitID[\n            curOrder.unitID\n          ].map((via) => TerritoryMap[via.dest].province);\n        } else {\n          provincesToHighlight = [\n            maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n          ];\n          provincesToChoose = legalOrders.legalMoveDestsByUnitID[\n            curOrder.unitID\n          ].map((territory) => TerritoryMap[territory].province);\n        }\n      } else if (curOrder.type === \"Support\") {\n        if (curOrder.fromTerrID) {\n          provincesToHighlight = [\n            maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n            maps.terrIDToProvince[curOrder.fromTerrID],\n          ];\n          provincesToChoose = legalOrders.legalSupportsByUnitID[\n            curOrder.unitID\n          ][maps.terrIDToProvince[curOrder.fromTerrID]].map(\n            (support) => support.dest,\n          );\n        } else {\n          provincesToHighlight = [\n            maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n          ];\n          provincesToChoose = Object.keys(\n            legalOrders.legalSupportsByUnitID[curOrder.unitID],\n          ) as Province[];\n        }\n      } else if (curOrder.type === \"Convoy\") {\n        if (curOrder.fromTerrID) {\n          provincesToHighlight = [\n            maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n            maps.terrIDToProvince[curOrder.fromTerrID],\n          ];\n          provincesToChoose = Object.keys(\n            legalOrders.legalConvoysByUnitID[curOrder.unitID][\n              maps.terrIDToProvince[curOrder.fromTerrID]\n            ],\n          ) as Province[];\n        } else {\n          provincesToHighlight = [\n            maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n          ];\n          provincesToChoose = Object.keys(\n            legalOrders.legalConvoysByUnitID[curOrder.unitID],\n          ) as Province[];\n        }\n      }\n    } else if (phase === \"Retreats\") {\n      if (!curOrder.inProgress) {\n        provincesToHighlight = [];\n        provincesToChoose = Object.keys(\n          legalOrders.legalRetreatDestsByUnitID,\n        ).map((unitID) => maps.terrIDToProvince[maps.unitToTerrID[unitID]]);\n      } else if (curOrder.type === \"Retreat\") {\n        provincesToHighlight = [\n          maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n        ];\n        provincesToChoose = legalOrders.legalRetreatDestsByUnitID[\n          curOrder.unitID\n        ].map((territory) => TerritoryMap[territory].province);\n        provincesToChoose.push(provincesToHighlight[0]);\n      }\n    } else if (phase === \"Builds\") {\n      if (user.member.supplyCenterNo < user.member.unitNo) {\n        provincesToChoose = units\n          .filter((unit) => unit.country === user.member.country)\n          .map((unit) => unit.mappedTerritory.province);\n      } else if (user.member.supplyCenterNo > user.member.unitNo) {\n        provincesToChoose = legalOrders.possibleBuildDests.map(\n          (territory) => TerritoryMap[territory].province,\n        );\n      }\n    }\n  }\n  const provincesToHighlightSet = new Set(provincesToHighlight);\n  const provincesToChooseSet = new Set(provincesToChoose);\n  // console.log({ provincesToChooseSet });\n\n  const unplayableProvinces = Object.values(provincesMapData)\n    .filter((data) => !data.playable)\n    .map((data) => {\n      return (\n        <WDProvince\n          provinceMapData={data}\n          ownerCountryID={centersByProvince[data.province]?.ownerCountryID}\n          playerCountryID={user?.member.countryID}\n          highlightSelection={false}\n          key={`${data.province}-province`}\n        />\n      );\n    });\n  // Hack - Rome and Naples need to be sorted to the end or else their label will get cut\n  // off by neighboring territories drawn on top of it.\n  const playableProvincesData = Object.values(provincesMapData).filter(\n    (data) =>\n      data.playable &&\n      data.province !== Province.NAPLES &&\n      data.province !== Province.ROME,\n  );\n  playableProvincesData.push(provincesMapData[Province.NAPLES]);\n  playableProvincesData.push(provincesMapData[Province.ROME]);\n\n  const playableProvinces = playableProvincesData.map((data) => {\n    const highlightSelection = provincesToHighlightSet.has(data.province);\n    return (\n      <WDProvince\n        provinceMapData={data}\n        ownerCountryID={centersByProvince[data.province]?.ownerCountryID}\n        playerCountryID={user?.member.countryID}\n        highlightSelection={highlightSelection}\n        key={`${data.province}-province`}\n      />\n    );\n  });\n\n  const playableProvinceBorderHighlights = playableProvincesData\n    .filter((data) => provincesToChooseSet.has(data.province))\n    .map((data) => {\n      return (\n        <WDProvinceBorderHighlight\n          provinceMapData={data}\n          key={`${data.province}-province-border-highlight`}\n        />\n      );\n    });\n\n  const playableProvinceOverlays = playableProvincesData.map((data) => {\n    return (\n      <WDProvinceOverlay\n        provinceMapData={data}\n        units={units}\n        key={`${data.province}-province-overlay`}\n      />\n    );\n  });\n\n  return (\n    <g id=\"wD-boardmap-v10.3.4 1\">\n      <g id=\"unplayable\">{unplayableProvinces}</g>\n      <g id=\"playableProvinces\">{playableProvinces}</g>\n      <g id=\"playableProvinceBorderHighlights\">\n        {playableProvinceBorderHighlights}\n      </g>\n      <g id=\"playableProvinceOverlays\">{playableProvinceOverlays}</g>\n    </g>\n  );\n};\n\nexport default WDBoardMap;\n","import * as React from \"react\";\nimport ArrowColor from \"../../enums/ArrowColor\";\nimport ArrowType from \"../../enums/ArrowType\";\nimport webDiplomacyTheme from \"../../webDiplomacyTheme\";\n\nconst WDArrowMarkerColors = function (\n  arrowType: ArrowType,\n): React.ReactElement {\n  switch (arrowType) {\n    case ArrowType.SUPPORT:\n      return (\n        <>\n          {Object.entries(webDiplomacyTheme.palette.arrowColors).map(\n            ([arrowColor, config]) => (\n              <marker\n                id={`arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]}`}\n                key={`arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]}`}\n                markerWidth={12}\n                markerHeight={8}\n                refX={18}\n                refY={3}\n                orient=\"auto\"\n              >\n                <polygon\n                  points=\"0 0, 6 3, 0 6, 0 5, 4 3, 0 1\"\n                  fill={config.main}\n                />\n                <polygon\n                  points=\"4 0, 10 3, 4 6, 4 5, 8 3, 4 1\"\n                  fill={config.main}\n                />\n              </marker>\n            ),\n          )}\n        </>\n      );\n    case ArrowType.HOLD:\n      return (\n        <>\n          {Object.entries(webDiplomacyTheme.palette.arrowColors).map(\n            ([arrowColor, config]) => (\n              <marker\n                id={`arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]}`}\n                key={`arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]}`}\n                markerWidth={90}\n                markerHeight={90}\n                refX={10}\n                refY={45}\n                orient=\"auto\"\n                markerUnits=\"userSpaceOnUse\"\n                strokeWidth={4}\n              >\n                <path d=\" M 24 72 A 30 30 180 0 1 24 18\" stroke={config.main} />\n              </marker>\n            ),\n          )}\n        </>\n      );\n    default:\n      return (\n        <>\n          {Object.entries(webDiplomacyTheme.palette.arrowColors).map(\n            ([arrowColor, config]) => (\n              <marker\n                id={`arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]}`}\n                key={`arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]}`}\n                markerWidth={8}\n                markerHeight={8}\n                refX={\n                  (arrowColor as unknown as number) ===\n                  ArrowColor.IMPLIED_FOREIGN\n                    ? 0\n                    : 7.1\n                }\n                refY={4}\n                orient=\"auto\"\n              >\n                <polygon points=\"0 0, 8 4, 0 8\" fill={config.main} />\n              </marker>\n            ),\n          )}\n        </>\n      );\n  }\n};\n\nconst WDArrowMarkerDefs = function (): React.ReactElement {\n  return (\n    <>\n      {WDArrowMarkerColors(ArrowType.HOLD)}\n      {WDArrowMarkerColors(ArrowType.MOVE)}\n      {WDArrowMarkerColors(ArrowType.SUPPORT)}\n    </>\n  );\n};\n\nexport default WDArrowMarkerDefs;\n","import BuildUnit from \"../enums/BuildUnit\";\n\nexport const BuildUnitTypeMap = {\n  Army: BuildUnit.Army,\n  Fleet: BuildUnit.Fleet,\n  [BuildUnit.Army]: \"Army\",\n  [BuildUnit.Fleet]: \"Fleet\",\n} as const;\n\nconst BuildUnitMap = {\n  [BuildUnit.Army]: \"Build Army\",\n  [BuildUnit.Fleet]: \"Build Fleet\",\n  \"Build Army\": BuildUnit.Army,\n  \"Build Fleet\": BuildUnit.Fleet,\n} as const;\n\nexport default BuildUnitMap;\n","/* eslint-disable no-bitwise */\nimport * as React from \"react\";\nimport provincesMapData from \"../../../data/map/ProvincesMapData\";\nimport BuildUnit from \"../../../enums/BuildUnit\";\nimport Country from \"../../../enums/Country\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport UIState from \"../../../enums/UIState\";\nimport WDArmyIcon from \"../../ui/units/WDArmyIcon\";\nimport WDFleetIcon from \"../../ui/units/WDFleetIcon\";\n\nexport interface BuildData {\n  availableOrder: string;\n  clickCallback: (\n    availableOrder: BuildData[\"availableOrder\"],\n    canBuild: BuildData[\"canBuild\"],\n    toTerrID: BuildData[\"toTerrID\"],\n  ) => void;\n  country: Country;\n  canBuild: BuildUnit;\n  province: Province;\n  unitSlotName: string;\n  toTerrID: string;\n}\n\nconst WDBuildUnitButtons: React.FC<BuildData> = function ({\n  availableOrder,\n  clickCallback,\n  country,\n  canBuild,\n  province,\n  unitSlotName,\n  toTerrID,\n}): React.ReactElement {\n  const provinceMapData = provincesMapData[province];\n  let svgX =\n    provinceMapData.x + provinceMapData.unitSlotsBySlotName[unitSlotName].x;\n  let svgY =\n    provinceMapData.y + provinceMapData.unitSlotsBySlotName[unitSlotName].y;\n\n  let rw = 70;\n  const rh = 70;\n  const rBorder = 10;\n  const rFill = \"rgba(0,0,0,.7)\";\n  const buildButtons: React.ReactElement[] = [];\n  const iconStyle: React.CSSProperties = {\n    width: 50,\n    height: 50,\n  };\n  const groupStyle: React.CSSProperties = {\n    cursor: \"pointer\",\n  };\n\n  const cx = 0 + rw / 2;\n  const cy = 0 + rh / 2;\n  const r = 25;\n  const iconX = cx - r;\n  const iconY = cy - r;\n  svgY -= rh;\n  if (canBuild & BuildUnit.Army) {\n    buildButtons.push(\n      <g\n        key=\"Army\"\n        style={groupStyle}\n        onClick={() => {\n          clickCallback(availableOrder, BuildUnit.Army, toTerrID);\n        }}\n      >\n        <circle fill=\"white\" r={r} cx={cx} cy={cy} />\n        <svg x={iconX} y={iconY} style={iconStyle}>\n          <WDArmyIcon country={country} iconState={UIState.BUILD} />\n        </svg>\n      </g>,\n    );\n  }\n  if (canBuild & BuildUnit.Fleet) {\n    let shift = 0;\n    if (buildButtons.length) {\n      shift = rw - rBorder;\n      rw = rw * 2 - rBorder;\n    }\n    buildButtons.push(\n      <g\n        key=\"Fleet\"\n        style={groupStyle}\n        onClick={() => {\n          clickCallback(availableOrder, BuildUnit.Fleet, toTerrID);\n        }}\n      >\n        <circle fill=\"white\" r={r} cx={cx + shift} cy={cy} />\n        <svg x={iconX + shift} y={iconY} style={iconStyle}>\n          <WDFleetIcon country={country} iconState={UIState.BUILD} />\n        </svg>\n      </g>,\n    );\n  }\n  svgX -= rw / 2;\n  return (\n    <svg x={svgX} y={svgY}>\n      <rect\n        x={0}\n        y={0}\n        fill={rFill}\n        width={rw}\n        height={rh}\n        rx={rBorder}\n        ry={rBorder}\n      />\n      {buildButtons}\n    </svg>\n  );\n};\n\nexport default WDBuildUnitButtons;\n","/* eslint-disable no-bitwise */\nimport { Box } from \"@mui/material\";\nimport * as React from \"react\";\nimport BuildUnitMap from \"../../../data/BuildUnit\";\nimport countryMap from \"../../../data/map/variants/classic/CountryMap\";\nimport BuildUnit from \"../../../enums/BuildUnit\";\nimport {\n  gameApiSliceActions,\n  gameOrder,\n  gameTerritoriesMeta,\n  gameMaps,\n} from \"../../../state/game/game-api-slice\";\nimport { useAppDispatch, useAppSelector } from \"../../../state/hooks\";\nimport WDBuildUnitButtons from \"./WDBuildUnitButtons\";\nimport { TerritoryMeta } from \"../../../state/interfaces/TerritoriesState\";\nimport TerritoryMap from \"../../../data/map/variants/classic/TerritoryMap\";\nimport provincesMapData from \"../../../data/map/ProvincesMapData\";\n\nconst WDBuildContainer: React.FC = function (): React.ReactElement {\n  const dispatch = useAppDispatch();\n  const maps = useAppSelector(gameMaps);\n\n  const build = (availableOrder, canBuild, toTerrID) => {\n    // console.log(\n    //   `Dispatched a build ${canBuild} ${BuildUnitMap[canBuild]} ${toTerrID}`,\n    // );\n    let terrIDToBuildOn = toTerrID;\n    if (BuildUnitMap[canBuild] === \"Build Army\") {\n      // If we initiated a build popup onto a special coast but the user\n      // chose to build an army, make sure the army gets built on the province\n      // root territory rather than a special coast.\n      terrIDToBuildOn = maps.terrIDToProvinceID[toTerrID];\n    }\n    dispatch(\n      gameApiSliceActions.updateOrdersMeta({\n        [availableOrder]: {\n          saved: false,\n          update: {\n            type: BuildUnitMap[canBuild],\n            toTerrID: terrIDToBuildOn,\n          },\n        },\n      }),\n    );\n    dispatch(gameApiSliceActions.resetOrder());\n  };\n  const order = useAppSelector(gameOrder);\n  const userMember = useAppSelector(\n    (state) => state.game.overview.user!.member,\n  );\n  if (!order || order.type !== \"Build\") {\n    return <Box />;\n  }\n  const territory = maps.terrIDToTerritory[order.toTerrID];\n  const { province, unitSlotName } = TerritoryMap[territory];\n  const canBuild =\n    provincesMapData[province].type === \"Coast\"\n      ? BuildUnit.All\n      : BuildUnit.Army;\n  return (\n    <WDBuildUnitButtons\n      key={`${province}-${unitSlotName}`}\n      availableOrder={order.orderID}\n      canBuild={canBuild}\n      clickCallback={build}\n      country={countryMap[userMember.country]}\n      province={province}\n      unitSlotName={unitSlotName}\n      toTerrID={order.toTerrID}\n    />\n  );\n};\n\nexport default WDBuildContainer;\n","/* eslint-disable no-bitwise */\nimport * as React from \"react\";\nimport { Box, Button, Stack } from \"@mui/material\";\nimport {\n  gameApiSliceActions,\n  gameOrder,\n} from \"../../../state/game/game-api-slice\";\nimport { useAppDispatch, useAppSelector } from \"../../../state/hooks\";\nimport WDBuildUnitButtons from \"./WDBuildUnitButtons\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport provincesMapData from \"../../../data/map/ProvincesMapData\";\n\ntype Position = \"left\" | \"right\" | \"top\" | \"bottom\";\n\ninterface WDOrderTypeButtonProps {\n  province: Province;\n  unitSlotName: string;\n  position: Position;\n  text: string;\n  clickHandler: () => void;\n}\n\nconst WDFlyoutButton: React.FC<WDOrderTypeButtonProps> = function ({\n  province,\n  unitSlotName,\n  position,\n  text,\n  clickHandler,\n}): React.ReactElement {\n  const dispatch = useAppDispatch();\n  const provinceMapData = provincesMapData[province];\n  if (!provinceMapData || !provinceMapData.unitSlotsBySlotName[unitSlotName])\n    return <Box />;\n\n  const unitX =\n    provinceMapData.x + provinceMapData.unitSlotsBySlotName[unitSlotName].x;\n  const unitY =\n    provinceMapData.y + provinceMapData.unitSlotsBySlotName[unitSlotName].y;\n\n  const fontSize = 28;\n  const rw = 55 + fontSize * text.length * 0.4;\n  const rh = 45 + fontSize;\n  const rBorder = 35;\n  const rFill = \"rgba(0,0,0,.7)\";\n  const groupStyle: React.CSSProperties = {\n    cursor: \"pointer\",\n  };\n  let shiftX = 0;\n  let shiftY = 0;\n  const shiftOffset = 50;\n  if (position === \"top\") {\n    shiftY = -(rh / 2 + shiftOffset);\n  } else if (position === \"bottom\") {\n    shiftY = +(rh / 2 + shiftOffset);\n  } else if (position === \"left\") {\n    shiftX = -(rw / 2 + shiftOffset);\n  } else if (position === \"right\") {\n    shiftX = +(rw / 2 + shiftOffset);\n  } else {\n    throw Error(position);\n  }\n  const svgX = unitX - rw / 2 + shiftX;\n  const svgY = unitY - rh / 2 + shiftY;\n\n  /*\n   * r is the circle radius\n  cx and cy are offsets\n  rx and ry and rounded edges\n   */\n  return (\n    <svg\n      x={svgX}\n      y={svgY}\n      filter=\"drop-shadow(10px 10px 18px #222222)\"\n      onClick={clickHandler}\n    >\n      <g style={groupStyle}>\n        <rect\n          x={0}\n          y={0}\n          fill=\"white\"\n          width={rw}\n          height={rh}\n          rx={rBorder}\n          ry={rBorder}\n        />\n        <text\n          x={rw / 2}\n          y={rh / 2}\n          textAnchor=\"middle\"\n          alignmentBaseline=\"middle\"\n          fontFamily=\"Roboto\"\n          fontSize={fontSize}\n          style={{\n            userSelect: \"none\",\n          }}\n          fill=\"black\"\n        >\n          {text}\n        </text>\n      </g>\n    </svg>\n  );\n};\n\nexport default WDFlyoutButton;\n","/* eslint-disable no-bitwise */\nimport * as React from \"react\";\nimport { Box, Button, Stack } from \"@mui/material\";\nimport {\n  gameApiSliceActions,\n  gameLegalOrders,\n  gameMaps,\n  gameOrder,\n} from \"../../../state/game/game-api-slice\";\nimport { useAppDispatch, useAppSelector } from \"../../../state/hooks\";\nimport Territory from \"../../../enums/map/variants/classic/Territory\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport { Unit } from \"../../../utils/map/getUnits\";\n\nimport WDFlyoutButton from \"./WDFlyoutButton\";\nimport TerritoryMap from \"../../../data/map/variants/classic/TerritoryMap\";\n\ninterface WDFlyoutContainerProps {\n  units: Unit[];\n}\n\nconst WDFlyoutContainer: React.FC<WDFlyoutContainerProps> = function ({\n  units,\n}): React.ReactElement {\n  const dispatch = useAppDispatch();\n  const order = useAppSelector(gameOrder);\n  const maps = useAppSelector(gameMaps);\n  const legalOrders = useAppSelector(gameLegalOrders);\n\n  // console.log(\"FLYOUT\");\n  // console.log({ order });\n\n  if (!order.inProgress || order.type || !order.unitID) {\n    return <Box />;\n  }\n\n  const unit = units.find((u) => u.unit.id === order.unitID);\n\n  const mTerr = TerritoryMap[maps.unitToTerritory[order.unitID]];\n  const { province, unitSlotName } = mTerr;\n  const clickHandler =\n    (orderType, viaConvoy: string | undefined = undefined) =>\n    () => {\n      // console.log(`Dispatched ${orderType}`);\n      dispatch(\n        gameApiSliceActions.updateOrder({\n          type: orderType,\n          viaConvoy,\n        }),\n      );\n    };\n  return (\n    <>\n      <WDFlyoutButton\n        province={province}\n        unitSlotName={unitSlotName}\n        position=\"left\"\n        text=\"Hold\"\n        clickHandler={clickHandler(\"Hold\")}\n      />\n      <WDFlyoutButton\n        province={province}\n        unitSlotName={unitSlotName}\n        position=\"right\"\n        text=\"Move\"\n        clickHandler={clickHandler(\"Move\")}\n      />\n      <WDFlyoutButton\n        province={province}\n        unitSlotName={unitSlotName}\n        position=\"top\"\n        text=\"Support\"\n        clickHandler={clickHandler(\"Support\")}\n      />\n      {(unit?.unit?.type === \"Fleet\" &&\n        mTerr.provinceMapData.type === \"Sea\" &&\n        legalOrders.hasAnyLegalConvoysByUnitID[order.unitID] && (\n          <WDFlyoutButton\n            province={province}\n            unitSlotName={unitSlotName}\n            position=\"bottom\"\n            text=\"Convoy\"\n            clickHandler={clickHandler(\"Convoy\")}\n          />\n        )) || <g />}\n      {unit?.unit?.type === \"Army\" &&\n        legalOrders.legalViasByUnitID[order.unitID].length > 0 && (\n          <WDFlyoutButton\n            province={province}\n            unitSlotName={unitSlotName}\n            position=\"bottom\"\n            text=\"Via Convoy\"\n            clickHandler={clickHandler(\"Move\", \"Yes\")}\n          />\n        )}\n    </>\n  );\n};\n\nexport default WDFlyoutContainer;\n","/* eslint-disable no-bitwise */\nimport * as React from \"react\";\nimport countryMap from \"../../../data/map/variants/classic/CountryMap\";\nimport { IOrderDataHistorical } from \"../../../models/Interfaces\";\nimport {\n  gameApiSliceActions,\n  gameOverview,\n  gameTerritoriesMeta,\n} from \"../../../state/game/game-api-slice\";\nimport { useAppDispatch, useAppSelector } from \"../../../state/hooks\";\nimport GameStateMaps from \"../../../state/interfaces/GameStateMaps\";\nimport ArrowType from \"../../../enums/ArrowType\";\nimport ArrowColor from \"../../../enums/ArrowColor\";\nimport drawArrowFunctional, {\n  getTargetXYWH,\n  getArrowX1Y1X2Y2,\n  makeSVGDrawAsUnsavedAnimateElement,\n} from \"../../../utils/map/drawArrowFunctional\";\nimport TerritoryMap from \"../../../data/map/variants/classic/TerritoryMap\";\nimport { APITerritories } from \"../../../state/interfaces/GameDataResponse\";\nimport { Unit, UnitDrawMode } from \"../../../utils/map/getUnits\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport provincesMapData from \"../../../data/map/ProvincesMapData\";\nimport Territory from \"../../../enums/map/variants/classic/Territory\";\n\n// Indicates that we should draw this Province as having a standoff.\nexport interface StandoffInfo {\n  // The webdip province ID of the standoff\n  provID: string;\n  // The province of the standoff\n  province: Province;\n  // The source and destination of moves that caused the standoff\n  attemptedMoves: [Territory, Territory][];\n}\n\nfunction accumulateMoveOrderArrows(\n  arrows: (React.ReactElement | null)[],\n  orders: IOrderDataHistorical[],\n  territories: APITerritories,\n): void {\n  // console.log(\"drawMoveOrders\");\n  orders\n    .filter((order) => order.type === \"Move\")\n    .forEach((order) => {\n      if (!order.toTerrID) {\n        return;\n      }\n      // console.log({\n      //   order,\n      //   territories,\n      //   terrID: order.terrID,\n      //   lookup: territories[order.terrID],\n      // });\n      const fromTerr = TerritoryMap[territories[order.terrID].name].territory;\n      const toTerr = TerritoryMap[territories[order.toTerrID].name].territory;\n\n      arrows.push(\n        drawArrowFunctional(\n          ArrowType.MOVE,\n          order.success === \"Yes\" ? ArrowColor.MOVE : ArrowColor.MOVE_FAILED,\n          \"unit\",\n          fromTerr,\n          \"territory\",\n          toTerr,\n          order.drawAsUnsaved,\n        ),\n      );\n      // console.log(\"ARROW\");\n      // console.log(arrows[0]);\n\n      if (order.viaConvoy === \"Yes\") {\n        // TODO need to distinguish via vs nonvia orders??\n      }\n    });\n}\n\nfunction getProvIDNumberOfTerrIDNumber(\n  terrID: number,\n  territories: APITerritories,\n): number {\n  if (territories[terrID]?.coastParentID) {\n    return Number(territories[terrID].coastParentID);\n  }\n  return terrID;\n}\n\nfunction accumulateSupportHoldOrderArrows(\n  arrows: (React.ReactElement | null)[],\n  orders: IOrderDataHistorical[],\n  ordersByProvID: { [key: number]: IOrderDataHistorical },\n  territories: APITerritories,\n): void {\n  // Maps supportee and supporter provIDs to help us find mutual supports.\n  const supporterProvIDToSupporteeProvID: { [key: number]: number } = {};\n  orders\n    .filter((order) => order.type === \"Support hold\")\n    .forEach((order) => {\n      const provID = getProvIDNumberOfTerrIDNumber(order.terrID, territories);\n      // Support orders toTerrID are always provinces\n      const supporteeProvID = order.toTerrID;\n      supporterProvIDToSupporteeProvID[provID] = supporteeProvID;\n    });\n  // console.log({ supporterProvIDToSupporteeProvID });\n\n  orders\n    .filter((order) => order.type === \"Support hold\")\n    .forEach((order) => {\n      if (!order.toTerrID) {\n        return;\n      }\n      const supporterProvID = getProvIDNumberOfTerrIDNumber(\n        order.terrID,\n        territories,\n      );\n      const supporterTerr =\n        TerritoryMap[territories[order.terrID].name].territory;\n\n      // Support orders toTerrID are actually always provinces\n      const supporteeProvID = order.toTerrID;\n      const supporteeOrder = ordersByProvID[supporteeProvID];\n\n      // If the supportee order is found at all, use it for the\n      // supportee territory since it is a territory id whereas the supporter's\n      // order might be province id.\n      const supporteeTerr = supporteeOrder\n        ? TerritoryMap[territories[supporteeOrder.terrID].name].territory\n        : TerritoryMap[territories[order.toTerrID].name].territory;\n\n      const arrowColor =\n        order.success === \"Yes\"\n          ? ArrowColor.SUPPORT_HOLD\n          : ArrowColor.SUPPORT_HOLD_FAILED;\n\n      // In case of a mutual support hold, offset the support line by a few pixels\n      // so that the corresponding returning support line from the other order\n      // doesn't overlap with it.\n      const hasMutualSupport =\n        supporterProvIDToSupporteeProvID[supporteeProvID] === supporterProvID;\n      const offsetArrowSourcePixels = hasMutualSupport ? 6 : 0;\n      // console.log({\n      //   supporteeProvID,\n      //   supporterProvID,\n      //   hasMutualSupport,\n      //   offsetArrowSourcePixels,\n      // });\n\n      arrows.push(\n        drawArrowFunctional(\n          ArrowType.HOLD,\n          arrowColor,\n          \"unit\",\n          supporterTerr,\n          \"unit\",\n          supporteeTerr,\n          order.drawAsUnsaved,\n          offsetArrowSourcePixels,\n        ),\n      );\n    });\n}\n\nfunction accumulateSupportMoveOrderArrows(\n  arrows: (React.ReactElement | null)[],\n  orders: IOrderDataHistorical[],\n  ordersByProvID: { [key: number]: IOrderDataHistorical },\n  territories: APITerritories,\n  ghostArrowsAlreadyAdded: Set<string>,\n): void {\n  orders\n    .filter((order) => order.type === \"Support move\")\n    .forEach((order) => {\n      if (!(order.fromTerrID && order.toTerrID)) {\n        return;\n      }\n\n      const supporterTerr =\n        TerritoryMap[territories[order.terrID].name].territory;\n      let isCoordinated = false;\n      // Support orders fromTerrID are actually always provinces\n      const supporteeProvID = order.fromTerrID;\n      const supporteeOrder = ordersByProvID[supporteeProvID];\n      if (\n        supporteeOrder &&\n        supporteeOrder.type === \"Move\" &&\n        (supporteeOrder.terrID === order.fromTerrID ||\n          territories[supporteeOrder.terrID].coastParentID ===\n            order.fromTerrID.toString()) &&\n        (supporteeOrder.toTerrID === order.toTerrID ||\n          territories[supporteeOrder.toTerrID].coastParentID ===\n            order.toTerrID.toString())\n      ) {\n        isCoordinated = true;\n      }\n\n      // If the supportee order is found at all, use it for the\n      // supportee territory since it is coast qualified whereas the supporter's\n      // order does not have to be coast qualified.\n      const supporteeTerr = supporteeOrder\n        ? TerritoryMap[territories[supporteeOrder.terrID].name].territory\n        : TerritoryMap[territories[order.fromTerrID].name].territory;\n\n      const arrowColor =\n        order.success === \"Yes\"\n          ? ArrowColor.SUPPORT_MOVE\n          : ArrowColor.SUPPORT_MOVE_FAILED;\n\n      if (isCoordinated) {\n        // For coordinated supports, use the order for the supportee for determining\n        // the destination location because the destination of the supportee order\n        // must be coast-qualified whereas the locations of the supporter order\n        // does not have to be coast-qualified.\n        const toTerr =\n          TerritoryMap[territories[supporteeOrder.toTerrID].name].territory;\n\n        arrows.push(\n          drawArrowFunctional(\n            ArrowType.SUPPORT,\n            arrowColor,\n            \"unit\",\n            supporterTerr,\n            \"arrow\",\n            getArrowX1Y1X2Y2(\"unit\", supporteeTerr, \"territory\", toTerr),\n            order.drawAsUnsaved,\n          ),\n        );\n      } else {\n        // Uncoordinated supports\n        const toTerr = TerritoryMap[territories[order.toTerrID].name].territory;\n        arrows.push(\n          drawArrowFunctional(\n            ArrowType.SUPPORT,\n            arrowColor,\n            \"unit\",\n            supporterTerr,\n            \"arrow\",\n            getArrowX1Y1X2Y2(\"unit\", supporteeTerr, \"territory\", toTerr),\n            order.drawAsUnsaved,\n          ),\n        );\n        // Also draw a ghosty arrow of what we're trying to support.\n        const ghostArrowID = `${supporteeTerr}|${toTerr}`;\n        if (!ghostArrowsAlreadyAdded.has(ghostArrowID)) {\n          ghostArrowsAlreadyAdded.add(ghostArrowID);\n          arrows.push(\n            drawArrowFunctional(\n              ArrowType.MOVE,\n              ArrowColor.IMPLIED_FOREIGN,\n              \"unit\",\n              supporteeTerr,\n              \"territory\",\n              toTerr,\n              order.drawAsUnsaved,\n            ),\n          );\n        }\n      }\n    });\n}\n\nfunction accumulateConvoyOrderArrows(\n  arrows: (React.ReactElement | null)[],\n  orders: IOrderDataHistorical[],\n  ordersByProvID: { [key: number]: IOrderDataHistorical },\n  territories: APITerritories,\n  ghostArrowsAlreadyAdded: Set<string>,\n): void {\n  orders\n    .filter((order) => order.type === \"Convoy\")\n    .forEach((order) => {\n      if (!(order.fromTerrID && order.toTerrID)) {\n        return;\n      }\n\n      const convoyerTerr =\n        TerritoryMap[territories[order.terrID].name].territory;\n      const convoyeeTerr =\n        TerritoryMap[territories[order.fromTerrID].name].territory;\n      let isCoordinated = false;\n      // Convoyees are always armies, whose terrIDs and provIDs match\n      const convoyeeOrder = ordersByProvID[order.fromTerrID];\n      if (\n        convoyeeOrder &&\n        convoyeeOrder.type === \"Move\" &&\n        convoyeeOrder.terrID === order.fromTerrID &&\n        (convoyeeOrder.toTerrID === order.toTerrID ||\n          territories[convoyeeOrder.toTerrID].coastParentID ===\n            order.toTerrID.toString())\n      ) {\n        isCoordinated = true;\n      }\n\n      const arrowColor =\n        order.success === \"Yes\" ? ArrowColor.CONVOY : ArrowColor.CONVOY_FAILED;\n\n      const toTerr = TerritoryMap[territories[order.toTerrID].name].territory;\n      arrows.push(\n        drawArrowFunctional(\n          ArrowType.CONVOY,\n          arrowColor,\n          \"unit\",\n          convoyerTerr,\n          \"arrow\",\n          getArrowX1Y1X2Y2(\"unit\", convoyeeTerr, \"territory\", toTerr),\n          order.drawAsUnsaved,\n        ),\n      );\n      if (!isCoordinated) {\n        // Also draw a ghosty arrow of what we're trying to support.\n        const ghostArrowID = `${convoyeeTerr}|${toTerr}`;\n        if (!ghostArrowsAlreadyAdded.has(ghostArrowID)) {\n          ghostArrowsAlreadyAdded.add(ghostArrowID);\n          arrows.push(\n            drawArrowFunctional(\n              ArrowType.MOVE,\n              ArrowColor.IMPLIED_FOREIGN,\n              \"unit\",\n              convoyeeTerr,\n              \"territory\",\n              toTerr,\n              order.drawAsUnsaved,\n            ),\n          );\n        }\n      }\n    });\n}\n\nfunction accumulateRetreatArrows(\n  arrows: (React.ReactElement | null)[],\n  orders: IOrderDataHistorical[],\n  territories: APITerritories,\n): void {\n  orders\n    .filter((order) => order.type === \"Retreat\")\n    .forEach((order) => {\n      if (!order.toTerrID) {\n        return;\n      }\n      const fromTerr = TerritoryMap[territories[order.terrID].name].territory;\n      const toTerr = TerritoryMap[territories[order.toTerrID].name].territory;\n\n      arrows.push(\n        drawArrowFunctional(\n          ArrowType.MOVE,\n          ArrowColor.RETREAT,\n          \"unit\",\n          fromTerr,\n          \"territory\",\n          toTerr,\n          order.drawAsUnsaved,\n        ),\n      );\n    });\n}\n\nfunction accumulateDislodgerArrows(\n  arrows: (React.ReactElement | null)[],\n  units: Unit[],\n  territories: APITerritories,\n): void {\n  units\n    .filter((unit) => unit.drawMode === UnitDrawMode.DISLODGING)\n    .forEach((unit) => {\n      if (unit.movedFromTerrID === null) return;\n      const fromTerr =\n        TerritoryMap[territories[unit.movedFromTerrID].name].territory;\n      const toTerr = TerritoryMap[territories[unit.unit.terrID].name].territory;\n\n      arrows.push(\n        drawArrowFunctional(\n          ArrowType.MOVE,\n          ArrowColor.MOVE,\n          \"territory\",\n          fromTerr,\n          \"dislodger\",\n          toTerr,\n          false,\n        ),\n      );\n    });\n}\n\n// This isn't exactly an arrow, but...\nfunction accumulateBuildCircles(\n  arrows: (React.ReactElement | null)[],\n  units: Unit[],\n  territories: APITerritories,\n): void {\n  units\n    .filter((unit) => unit.drawMode === UnitDrawMode.BUILD)\n    .forEach((unit) => {\n      const terr = TerritoryMap[territories[unit.unit.terrID].name].territory;\n      const [x, y, w, h] = getTargetXYWH(\"unit\", terr);\n\n      arrows.push(\n        <circle\n          key={`build-circle-${terr}`}\n          cx={x}\n          cy={y}\n          r={(1.4 * (w + h)) / 4}\n          fill=\"none\"\n          stroke=\"rgb(0,150,0)\"\n          strokeWidth={0.05 * (w + h)}\n        >\n          {unit.drawAsUnsaved && makeSVGDrawAsUnsavedAnimateElement()}\n        </circle>,\n      );\n    });\n}\n\nfunction accumulateDisbandMarks(\n  arrows: (React.ReactElement | null)[],\n  units: Unit[],\n  territories: APITerritories,\n): void {\n  units\n    .filter((unit) => unit.drawMode === UnitDrawMode.DISBANDED)\n    .forEach((unit) => {\n      const terr = TerritoryMap[territories[unit.unit.terrID].name].territory;\n      const [x1, y1, w1, h1] = getTargetXYWH(\"unit\", terr);\n      const MARKSIZE = 38;\n      arrows.push(\n        <line\n          key={`disbandmark-${terr}-1`}\n          x1={x1 - MARKSIZE}\n          y1={y1 - MARKSIZE}\n          x2={x1 + MARKSIZE}\n          y2={y1 + MARKSIZE}\n          stroke=\"red\"\n          strokeWidth={4}\n        >\n          {unit.drawAsUnsaved && makeSVGDrawAsUnsavedAnimateElement()}\n        </line>,\n      );\n      arrows.push(\n        <line\n          key={`disbandmark-${terr}-2`}\n          x1={x1 + MARKSIZE}\n          y1={y1 - MARKSIZE}\n          x2={x1 - MARKSIZE}\n          y2={y1 + MARKSIZE}\n          stroke=\"red\"\n          strokeWidth={4}\n        >\n          {unit.drawAsUnsaved && makeSVGDrawAsUnsavedAnimateElement()}\n        </line>,\n      );\n    });\n}\n\nfunction accumulateStandoffMarks(\n  arrows: (React.ReactElement | null)[],\n  standoffs: StandoffInfo[],\n): void {\n  standoffs.forEach((standoff) => {\n    const { province } = standoff;\n    const { rootTerritory } = provincesMapData[province];\n    if (!rootTerritory) return;\n\n    const [x1, y1, w1, h1] = getTargetXYWH(\"territory\", rootTerritory);\n    const MARKSIZE = 15;\n    arrows.push(\n      <line\n        key={`standoffmark-${province}-1`}\n        x1={x1 - MARKSIZE}\n        y1={y1 - MARKSIZE}\n        x2={x1 + MARKSIZE}\n        y2={y1 + MARKSIZE}\n        stroke=\"tomato\"\n        strokeWidth={6}\n      />,\n    );\n    arrows.push(\n      <line\n        key={`standoffmark-${province}-2`}\n        x1={x1 + MARKSIZE}\n        y1={y1 - MARKSIZE}\n        x2={x1 - MARKSIZE}\n        y2={y1 + MARKSIZE}\n        stroke=\"tomato\"\n        strokeWidth={6}\n      />,\n    );\n    standoff.attemptedMoves.forEach(([src, dst]) => {\n      arrows.push(\n        drawArrowFunctional(\n          ArrowType.MOVE,\n          ArrowColor.MOVE_FAILED,\n          \"unit\",\n          src,\n          \"territory\",\n          dst,\n          false,\n        ),\n      );\n    });\n  });\n}\n\n/*\nexport interface IOrderDataHistorical {\n  countryID: string;\n  dislodged: string;\n  fromTerrID: number;\n  phase: string;\n  success: string;\n  terrID: number;\n  toTerrID: number;\n  turn: number;\n  type: string;\n  unitType: string;\n  viaConvoy: string;\n}\n*/\n\ninterface WDArrowProps {\n  orders: IOrderDataHistorical[];\n  units: Unit[];\n  maps: GameStateMaps;\n  territories: APITerritories;\n  standoffs: StandoffInfo[];\n}\n\nconst WDArrowContainer: React.FC<WDArrowProps> = function ({\n  orders,\n  units,\n  maps,\n  territories,\n  standoffs,\n}): React.ReactElement {\n  const arrows: (React.ReactElement | null)[] = [];\n\n  const ordersByProvID = {};\n  orders.forEach((order) => {\n    ordersByProvID[getProvIDNumberOfTerrIDNumber(order.terrID, territories)] =\n      order;\n  });\n  // Accumulate ghosty arrows so that we don't draw multiples of them if we have\n  // multiple units supporting or convoying a unit that isn't coordinated with them.\n  const ghostArrowsAlreadyAdded = new Set<string>();\n  accumulateMoveOrderArrows(arrows, orders, territories);\n  accumulateSupportHoldOrderArrows(arrows, orders, ordersByProvID, territories);\n  accumulateSupportMoveOrderArrows(\n    arrows,\n    orders,\n    ordersByProvID,\n    territories,\n    ghostArrowsAlreadyAdded,\n  );\n  accumulateConvoyOrderArrows(\n    arrows,\n    orders,\n    ordersByProvID,\n    territories,\n    ghostArrowsAlreadyAdded,\n  );\n  accumulateRetreatArrows(arrows, orders, territories);\n  accumulateDislodgerArrows(arrows, units, territories);\n  accumulateBuildCircles(arrows, units, territories);\n  accumulateDisbandMarks(arrows, units, territories);\n  accumulateStandoffMarks(arrows, standoffs);\n  return <g id=\"arrows\">{arrows}</g>;\n};\n\nexport default WDArrowContainer;\n","import * as React from \"react\";\nimport WDBoardMap from \"./variants/classic/components/WDBoardMap\";\nimport CapturableLandTexture from \"../../assets/textures/capturable-land.jpeg\";\nimport WaterTexture from \"../../assets/textures/sea-texture.png\";\nimport WDArrowMarkerDefs from \"../../utils/map/WDArrowMarkerDefs\";\nimport WDBuildContainer from \"./components/WDBuildContainer\";\nimport WDFlyoutContainer from \"./components/WDFlyoutContainer\";\nimport WDArrowContainer, { StandoffInfo } from \"./components/WDArrowContainer\";\nimport { Unit } from \"../../utils/map/getUnits\";\nimport { IOrderDataHistorical } from \"../../models/Interfaces\";\nimport GameStateMaps from \"../../state/interfaces/GameStateMaps\";\nimport { APITerritories } from \"../../state/interfaces/GameDataResponse\";\nimport Territory from \"../../enums/map/variants/classic/Territory\";\nimport Province from \"../../enums/map/variants/classic/Province\";\n\ninterface WDMapProps {\n  units: Unit[];\n  phase: string;\n  orders: IOrderDataHistorical[];\n  maps: GameStateMaps;\n  territories: APITerritories;\n  centersByProvince: { [key: string]: { ownerCountryID: string } };\n  standoffs: StandoffInfo[];\n  isLivePhase: boolean; // Game is live and user is viewing the latest phase?\n}\n\nconst WDMap: React.ForwardRefExoticComponent<\n  WDMapProps & React.RefAttributes<SVGSVGElement>\n> = React.forwardRef<SVGSVGElement, WDMapProps>(\n  (\n    {\n      units,\n      phase,\n      orders,\n      maps,\n      territories,\n      centersByProvince,\n      standoffs,\n      isLivePhase,\n    },\n    ref,\n  ): React.ReactElement => (\n    <svg\n      id=\"map\"\n      fill=\"none\"\n      ref={ref}\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n      }}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g id=\"full-map-svg\">\n        <g id=\"container\">\n          <WDBoardMap\n            units={units}\n            centersByProvince={centersByProvince}\n            phase={phase}\n            isLivePhase={isLivePhase}\n          />\n          <WDArrowContainer\n            orders={orders}\n            units={units}\n            maps={maps}\n            territories={territories}\n            standoffs={standoffs}\n          />\n          {isLivePhase && <WDBuildContainer />}\n          {isLivePhase && <WDFlyoutContainer units={units} />}\n        </g>\n      </g>\n      <defs>\n        <pattern\n          id=\"capturable-land\"\n          patternUnits=\"userSpaceOnUse\"\n          width=\"1546\"\n          height=\"1384\"\n        >\n          <image\n            href={CapturableLandTexture}\n            x=\"0\"\n            y=\"0\"\n            width=\"1546\"\n            height=\"1384\"\n          />\n        </pattern>\n        <pattern\n          id=\"sea-texture\"\n          patternUnits=\"userSpaceOnUse\"\n          width=\"1546\"\n          height=\"1384\"\n        >\n          <image href={WaterTexture} x=\"0\" y=\"0\" width=\"1966\" height=\"1615\" />\n        </pattern>\n        {WDArrowMarkerDefs()}\n\n        <pattern\n          id=\"neutral-land-texture\"\n          width=\"30\"\n          height=\"10\"\n          patternTransform=\"rotate(45 0 0)\"\n          patternUnits=\"userSpaceOnUse\"\n        >\n          <rect\n            x=\"0\"\n            y=\"0\"\n            width=\"30\"\n            height=\"10\"\n            style={{ fill: \"#C5BFBE\" }}\n          />\n          <line\n            x1=\"0\"\n            y1=\"0\"\n            x2=\"0\"\n            y2=\"10\"\n            style={{ stroke: \"#B5AFAE\", strokeWidth: 30 }}\n          />\n        </pattern>\n\n        <filter id=\"selectionGlow\" height=\"120%\" width=\"120%\" x=\"-10%\" y=\"-10%\">\n          <feMorphology\n            operator=\"dilate\"\n            radius=\"5\"\n            in=\"SourceAlpha\"\n            result=\"thickerSource\"\n          />\n          <feGaussianBlur\n            stdDeviation=\"8\"\n            in=\"thickerSource\"\n            result=\"blurredSource\"\n          />\n          <feFlood floodColor=\"rgb(100,200,255)\" result=\"glowColor\" />\n          <feComposite\n            in=\"glowColor\"\n            in2=\"blurredSource\"\n            operator=\"in\"\n            result=\"selectionGlowGlow\"\n          />\n        </filter>\n        <filter id=\"choiceGlow\" height=\"120%\" width=\"120%\" x=\"-10%\" y=\"-10%\">\n          <feMorphology\n            operator=\"dilate\"\n            radius=\"1\"\n            in=\"SourceAlpha\"\n            result=\"thickerSource\"\n          />\n          <feGaussianBlur\n            stdDeviation=\"6\"\n            in=\"thickerSource\"\n            result=\"blurredSource\"\n          />\n          <feFlood floodColor=\"rgb(255,255,255)\" result=\"glowColor\" />\n          <feComposite\n            in=\"glowColor\"\n            in2=\"blurredSource\"\n            operator=\"in\"\n            result=\"choicesGlowGlow\"\n          />\n        </filter>\n      </defs>\n    </svg>\n  ),\n);\n\nexport default React.memo(WDMap);\n","import * as React from \"react\";\nimport * as d3 from \"d3\";\nimport Device from \"../../enums/Device\";\nimport getInitialViewTranslation from \"../../utils/map/getInitialViewTranslation\";\nimport Scale from \"../../types/Scale\";\nimport WDMap from \"../map/WDMap\";\nimport useViewport from \"../../hooks/useViewport\";\nimport getDevice from \"../../utils/getDevice\";\nimport { useAppDispatch, useAppSelector } from \"../../state/hooks\";\nimport {\n  gameApiSliceActions,\n  gameOrdersMeta,\n} from \"../../state/game/game-api-slice\";\nimport { Unit } from \"../../utils/map/getUnits\";\nimport { IOrderDataHistorical } from \"../../models/Interfaces\";\nimport GameStateMaps from \"../../state/interfaces/GameStateMaps\";\nimport { APITerritories } from \"../../state/interfaces/GameDataResponse\";\nimport Province from \"../../enums/map/variants/classic/Province\";\nimport { StandoffInfo } from \"../map/components/WDArrowContainer\";\n\nconst Scales: Scale = {\n  DESKTOP: [0.45, 3],\n  MOBILE_LG: [0.32, 1.6],\n  MOBILE_LG_LANDSCAPE: [0.3, 1.6],\n  MOBILE: [0.32, 1.6],\n  MOBILE_LANDSCAPE: [0.27, 1.6],\n  TABLET: [0.6275, 3],\n  TABLET_LANDSCAPE: [0.6, 3],\n};\n\nconst getInitialScaleForDevice = (device: Device): number[] => {\n  return Scales[device];\n};\n\nconst mapOriginalWidth = 6010;\nconst mapOriginalHeight = 3005;\n\ninterface WDMapControllerProps {\n  units: Unit[];\n  phase: string;\n  orders: IOrderDataHistorical[];\n  maps: GameStateMaps;\n  territories: APITerritories;\n  centersByProvince: { [key: string]: { ownerCountryID: string } };\n  standoffs: StandoffInfo[];\n  isLivePhase: boolean; // Game is live and user is viewing the latest phase?\n}\n\nconst WDMapController: React.FC<WDMapControllerProps> = function ({\n  units,\n  phase,\n  orders,\n  maps,\n  territories,\n  centersByProvince,\n  isLivePhase,\n  standoffs,\n}): React.ReactElement {\n  const svgElement = React.useRef<SVGSVGElement>(null);\n  const [viewport] = useViewport();\n  const dispatch = useAppDispatch();\n  const ordersMeta = useAppSelector(gameOrdersMeta);\n  const device = getDevice(viewport);\n  const [scaleMin, scaleMax] = getInitialScaleForDevice(device);\n\n  if (phase === \"Error\") return <div />;\n  // const legalOrders = useAppSelector(gameLegalOrders);\n  // console.log({ legalOrders });\n\n  React.useLayoutEffect(() => {\n    if (svgElement.current) {\n      const fullMap = d3.select(svgElement.current);\n      const contained = fullMap.select(\"#container\");\n      const containedRect = contained.node().getBBox();\n      const gameBoardAreaRect = fullMap\n        .select(\"#playableProvinces\")\n        .node()\n        .getBBox();\n\n      const { scale, x, y } = getInitialViewTranslation(\n        containedRect,\n        gameBoardAreaRect,\n        scaleMin,\n        viewport,\n      );\n\n      const zoom = ({ transform }) => {\n        contained.attr(\"transform\", transform);\n      };\n\n      const d3Zoom = d3\n        .zoom()\n        .translateExtent([\n          [0, 0],\n          [mapOriginalWidth, mapOriginalHeight],\n        ])\n        .scaleExtent([scale, scaleMax])\n        .clickDistance(3)\n        .on(\"zoom\", zoom);\n\n      fullMap\n        .on(\"wheel\", (e) => e.preventDefault())\n        .call(d3Zoom)\n        .call(d3Zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale))\n        .on(\"dblclick.zoom\", null);\n    }\n  }, [svgElement, viewport]);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      dispatch(gameApiSliceActions.updateOrdersMeta(ordersMeta));\n    }, 500);\n  }, []);\n\n  React.useEffect(() => {\n    const keydownHandler = (e) => {\n      const keyCode = e.which || e.keyCode;\n      const ESCAPE = 27;\n      // console.log(\"KEYCODE\");\n      // console.log(keyCode);\n      if (keyCode === ESCAPE) {\n        e.preventDefault();\n        // console.log(\"DISPATCH RESET ORDER\");\n        dispatch(gameApiSliceActions.resetOrder());\n      }\n    };\n    // console.log(\"ADDING HANLDER\");\n    window.addEventListener(\"keydown\", keydownHandler);\n    return () => window.removeEventListener(\"keydown\", keydownHandler);\n  });\n\n  return (\n    <div\n      style={{\n        width: viewport.width,\n        height: viewport.height,\n      }}\n    >\n      <WDMap\n        ref={svgElement}\n        units={units}\n        phase={phase}\n        orders={orders}\n        maps={maps}\n        territories={territories}\n        centersByProvince={centersByProvince}\n        standoffs={standoffs}\n        isLivePhase={isLivePhase}\n      />\n    </div>\n  );\n};\n\nexport default WDMapController;\n","import { Viewport, BBox } from \"../../interfaces\";\nimport Translation from \"../../types/Translation\";\n\nexport default function getInitialViewTranslation(\n  containedRect: BBox,\n  gameBoardRect: BBox,\n  scale: number,\n  viewport: Viewport,\n): Translation {\n  let newScale = scale;\n  const containedHeight = containedRect.height * scale;\n\n  if (containedHeight < viewport.height) {\n    newScale = scale + (1 - containedHeight / viewport.height);\n  }\n\n  const translatedGameBoardAreaHeight = gameBoardRect.height * newScale;\n  const translatedGameBoardAreaY = gameBoardRect.y * newScale;\n\n  const translatedGameBoardAreaWidth = gameBoardRect.width * newScale;\n  const translatedGameBoardAreaX = gameBoardRect.x * newScale;\n\n  const nonPlayableHorizontalArea = Math.abs(\n    viewport.width - translatedGameBoardAreaWidth,\n  );\n  const horizontalPadding = Math.abs(nonPlayableHorizontalArea / 2);\n\n  const nonPlayableVerticalArea = Math.abs(\n    viewport.height - translatedGameBoardAreaHeight,\n  );\n  const verticalPadding = Math.abs(nonPlayableVerticalArea / 2);\n  const verticalBottomPadding =\n    (containedRect.y +\n      containedRect.height -\n      (gameBoardRect.y + gameBoardRect.height)) *\n    newScale;\n\n  let x: number;\n  let y: number;\n\n  if (viewport.height >= translatedGameBoardAreaHeight) {\n    y = -translatedGameBoardAreaY + verticalPadding;\n    if (verticalPadding > verticalBottomPadding) {\n      y += verticalPadding - verticalBottomPadding;\n    }\n  } else {\n    y = -translatedGameBoardAreaY - verticalPadding;\n  }\n\n  if (viewport.width >= translatedGameBoardAreaWidth) {\n    x = -translatedGameBoardAreaX + horizontalPadding;\n  } else {\n    x = -translatedGameBoardAreaX - horizontalPadding;\n  }\n\n  return {\n    scale: newScale,\n    x,\n    y,\n  };\n}\n"],"names":["className","height","width","fill","style","opacity","province","x","y","theme","useTheme","id","viewBox","xmlns","d","stroke","palette","primary","main","WDLabel","text","fontWeight","fontSize","userSelect","defaultProps","undefined","BuildUnit","provinceMapData","ownerCountryID","playerCountryID","highlightSelection","dispatch","useAppDispatch","useAppSelector","gameOverview","members","user","territoryFill","territoryFillOpacity","ownerCountry","find","m","countryID","Number","country","type","playerCountry","onClick","e","evt","gameApiSliceActions","clickProvince","texture","path","strokeOpacity","strokeWidth","fillOpacity","centerPos","labels","map","i","name","txt","abbr","overflow","children","transform","units","unitFCs","unitFCsDislodging","filter","unit","mappedTerritory","forEach","unitState","drawMode","UnitDrawMode","UIState","wdUnit","WDUnit","unitSlotName","unitSlots","arrowReceiver","unitName","centersByProvince","phase","isLivePhase","gameDataResponse","gameData","maps","gameMaps","provinceStatusByProvID","data","territoryStatuses","provinceStatus","terrIDToProvince","curOrder","gameOrder","legalOrders","gameLegalOrders","overview","provincesToHighlight","provincesToChoose","inProgress","viaConvoy","unitToTerrID","unitID","legalViasByUnitID","via","TerritoryMap","dest","legalMoveDestsByUnitID","territory","fromTerrID","legalSupportsByUnitID","support","Object","keys","legalConvoysByUnitID","legalRetreatDestsByUnitID","push","member","supplyCenterNo","unitNo","possibleBuildDests","provincesToHighlightSet","Set","provincesToChooseSet","unplayableProvinces","values","provincesMapData","playable","playableProvincesData","Province","playableProvinces","has","playableProvinceBorderHighlights","playableProvinceOverlays","WDArrowMarkerColors","arrowType","ArrowType","entries","webDiplomacyTheme","arrowColor","config","ArrowColor","markerWidth","markerHeight","refX","refY","orient","points","markerUnits","Army","Fleet","availableOrder","clickCallback","canBuild","toTerrID","svgX","unitSlotsBySlotName","svgY","rw","buildButtons","iconStyle","groupStyle","cursor","cx","iconX","r","cy","WDArmyIcon","iconState","shift","length","WDFleetIcon","rx","ry","order","userMember","state","game","Box","terrIDToTerritory","orderID","terrIDToBuildOn","BuildUnitMap","terrIDToProvinceID","saved","update","countryMap","position","clickHandler","unitX","unitY","shiftX","shiftY","Error","rh","textAnchor","alignmentBaseline","fontFamily","u","mTerr","unitToTerritory","orderType","hasAnyLegalConvoysByUnitID","getProvIDNumberOfTerrIDNumber","terrID","territories","coastParentID","orders","standoffs","arrows","ordersByProvID","ghostArrowsAlreadyAdded","fromTerr","toTerr","drawArrowFunctional","success","drawAsUnsaved","accumulateMoveOrderArrows","supporterProvIDToSupporteeProvID","provID","supporteeProvID","supporterProvID","supporterTerr","supporteeOrder","supporteeTerr","offsetArrowSourcePixels","accumulateSupportHoldOrderArrows","isCoordinated","toString","getArrowX1Y1X2Y2","ghostArrowID","add","accumulateSupportMoveOrderArrows","convoyerTerr","convoyeeTerr","convoyeeOrder","accumulateConvoyOrderArrows","accumulateRetreatArrows","movedFromTerrID","accumulateDislodgerArrows","terr","getTargetXYWH","w","h","makeSVGDrawAsUnsavedAnimateElement","accumulateBuildCircles","x1","y1","MARKSIZE","x2","y2","accumulateDisbandMarks","standoff","rootTerritory","attemptedMoves","src","dst","accumulateStandoffMarks","WDMap","React","ref","patternUnits","href","CapturableLandTexture","WaterTexture","WDArrowMarkerDefs","patternTransform","operator","radius","in","result","stdDeviation","floodColor","in2","Scales","DESKTOP","MOBILE_LG","MOBILE_LG_LANDSCAPE","MOBILE","MOBILE_LANDSCAPE","TABLET","TABLET_LANDSCAPE","svgElement","useViewport","viewport","ordersMeta","gameOrdersMeta","device","getInitialScaleForDevice","getDevice","scaleMin","scaleMax","current","fullMap","d3","contained","select","containedRect","gameBoardRect","scale","newScale","containedHeight","translatedGameBoardAreaHeight","translatedGameBoardAreaY","translatedGameBoardAreaWidth","translatedGameBoardAreaX","nonPlayableHorizontalArea","Math","abs","horizontalPadding","nonPlayableVerticalArea","verticalPadding","verticalBottomPadding","getInitialViewTranslation","node","getBBox","d3Zoom","translateExtent","scaleExtent","clickDistance","on","attr","preventDefault","call","setTimeout","keydownHandler","which","keyCode","window","addEventListener","removeEventListener"],"sourceRoot":""}